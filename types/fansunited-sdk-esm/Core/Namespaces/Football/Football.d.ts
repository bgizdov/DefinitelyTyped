import SDKConfigurationModel from "../../Configurator/Models/SDKConfiguraitonModel";
import FootballFacade from "./Facades/FootballFacade";
import FootballCountryModel from "../Football/Models/Country/FootballCountryModel";
import CompetitionBasicModel from "./Models/Competition/CompetitionBasicModel";
import CompetitionFullModel from "./Models/Competition/CompetitionFullModel";
import TeamBasicModel from "./Models/Team/TeamBasicModel";
import TeamFullModel from "./Models/Team/TeamFullModel";
import MatchFullModel from "./Models/Match/MatchFullModel";
import TopPlayerModel from "./Models/Player/TopPlayerModel";
import PlayerFullModel from "./Models/Player/PlayerFullModel";
import SearchModel from "./Models/Search/SearchModel";
import CompetitionFilters from "./Models/Competition/CompetitionFilters";
import TeamFilters from "./Models/Team/TeamFilters";
import MatchFilters from "./Models/Match/MatchFilters";
import PlayerFilters from "./Models/Player/PlayerFilters";
import SearchFilters from "./Models/Search/SearchFilters";
import FootballPaginationModel from "./Models/Pagination/FootballPaginationModel";
export default class Football {
    private https;
    private idMapping;
    private localCache;
    footballFacade: FootballFacade;
    constructor(config: SDKConfigurationModel);
    getCountries: (disableCache?: boolean) => Promise<FootballCountryModel[]>;
    getCompetitions: (filters?: CompetitionFilters, disableCache?: boolean) => Promise<CompetitionBasicModel[]>;
    getCompetitionById: (id: string, disableCache?: boolean) => Promise<CompetitionFullModel>;
    getTopCompetitions: (disableCache?: boolean) => Promise<CompetitionBasicModel[]>;
    getTeams: (filters?: TeamFilters, disableCache?: boolean) => Promise<FootballPaginationModel>;
    getTeamById: (id: string, disableCache?: boolean) => Promise<TeamFullModel>;
    getTopTeams: (disableCache?: boolean) => Promise<TeamBasicModel[]>;
    getNextMatchForTeam: (id: string, disableCache?: boolean) => Promise<MatchFullModel>;
    getPrevMatchForTeam: (id: string, disableCache?: boolean) => Promise<MatchFullModel>;
    getPlayers: (filters?: PlayerFilters, disableCache?: boolean) => Promise<FootballPaginationModel>;
    getPlayerById: (id: string, disableCache?: boolean) => Promise<PlayerFullModel>;
    getTopPlayers: (disableCache?: boolean) => Promise<TopPlayerModel[]>;
    getNextMatchForPlayer: (id: string, disableCache?: boolean) => Promise<MatchFullModel>;
    getPrevMatchForPlayer: (id: string, disableCache?: boolean) => Promise<MatchFullModel>;
    getMatches: (filters?: MatchFilters, disableCache?: boolean) => Promise<FootballPaginationModel>;
    getMatchById: (id: string, disableCache?: boolean) => Promise<MatchFullModel>;
    search: (filters: SearchFilters, disableCache?: boolean) => Promise<SearchModel>;
}
